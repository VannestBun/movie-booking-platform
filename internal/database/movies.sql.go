// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    id,
    created_at,
    updated_at,
    title,
    description,
    duration_minutes,
    poster_image_url,
    trailer_video_url
) VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,  -- title
    $2,  -- description
    $3,  -- duration_minutes
    $4,  -- poster_image_url
    $5   -- trailer_video_url
)
RETURNING id, created_at, updated_at, title, description, duration_minutes, poster_image_url, trailer_video_url
`

type CreateMovieParams struct {
	Title           string
	Description     string
	DurationMinutes int32
	PosterImageUrl  string
	TrailerVideoUrl string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.DurationMinutes,
		arg.PosterImageUrl,
		arg.TrailerVideoUrl,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.DurationMinutes,
		&i.PosterImageUrl,
		&i.TrailerVideoUrl,
	)
	return i, err
}

const getMovie = `-- name: GetMovie :one
Select id, created_at, updated_at, title, description, duration_minutes, poster_image_url, trailer_video_url
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.DurationMinutes,
		&i.PosterImageUrl,
		&i.TrailerVideoUrl,
	)
	return i, err
}
