// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movies.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
    id,
    created_at,
    updated_at,
    title,
    description,
    duration_minutes,
    poster_image_url,
    trailer_video_url,
    rating,
    genre,
    director,
    casts
) VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,  -- title
    $2,  -- description
    $3,  -- duration_minutes
    $4,  -- poster_image_url
    $5,   -- trailer_video_url
    $6,
    $7,
    $8,
    $9
)
RETURNING id, created_at, updated_at, title, description, duration_minutes, poster_image_url, trailer_video_url, rating, genre, director, casts
`

type CreateMovieParams struct {
	Title           string
	Description     string
	DurationMinutes int32
	PosterImageUrl  string
	TrailerVideoUrl string
	Rating          string
	Genre           string
	Director        string
	Casts           []string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie,
		arg.Title,
		arg.Description,
		arg.DurationMinutes,
		arg.PosterImageUrl,
		arg.TrailerVideoUrl,
		arg.Rating,
		arg.Genre,
		arg.Director,
		pq.Array(arg.Casts),
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.DurationMinutes,
		&i.PosterImageUrl,
		&i.TrailerVideoUrl,
		&i.Rating,
		&i.Genre,
		&i.Director,
		pq.Array(&i.Casts),
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
Select id, created_at, updated_at, title, description, duration_minutes, poster_image_url, trailer_video_url, rating, genre, director, casts
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id uuid.UUID) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.DurationMinutes,
		&i.PosterImageUrl,
		&i.TrailerVideoUrl,
		&i.Rating,
		&i.Genre,
		&i.Director,
		pq.Array(&i.Casts),
	)
	return i, err
}

const getMovies = `-- name: GetMovies :many
SELECT id, created_at, updated_at, title, description, duration_minutes, poster_image_url, trailer_video_url, rating, genre, director, casts FROM movies
ORDER BY title ASC
`

func (q *Queries) GetMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, getMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Description,
			&i.DurationMinutes,
			&i.PosterImageUrl,
			&i.TrailerVideoUrl,
			&i.Rating,
			&i.Genre,
			&i.Director,
			pq.Array(&i.Casts),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movies
SET title = $1, 
    description = $2, 
    duration_minutes = $3, 
    poster_image_url = $4, 
    trailer_video_url = $5, 
    rating = $6, 
    genre = $7,
    director = $8,
    casts = $9
WHERE id = $10
`

type UpdateMovieParams struct {
	Title           string
	Description     string
	DurationMinutes int32
	PosterImageUrl  string
	TrailerVideoUrl string
	Rating          string
	Genre           string
	Director        string
	Casts           []string
	ID              uuid.UUID
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.ExecContext(ctx, updateMovie,
		arg.Title,
		arg.Description,
		arg.DurationMinutes,
		arg.PosterImageUrl,
		arg.TrailerVideoUrl,
		arg.Rating,
		arg.Genre,
		arg.Director,
		pq.Array(arg.Casts),
		arg.ID,
	)
	return err
}
