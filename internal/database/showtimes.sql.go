// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: showtimes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createShowtime = `-- name: CreateShowtime :one
INSERT INTO showtimes (id, movie_id, start_time)
VALUES (
    gen_random_uuid(),
    $1,
    $2
)
RETURNING id, movie_id, start_time
`

type CreateShowtimeParams struct {
	MovieID   uuid.UUID
	StartTime time.Time
}

func (q *Queries) CreateShowtime(ctx context.Context, arg CreateShowtimeParams) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, createShowtime, arg.MovieID, arg.StartTime)
	var i Showtime
	err := row.Scan(&i.ID, &i.MovieID, &i.StartTime)
	return i, err
}

const getShowtime = `-- name: GetShowtime :one
SELECT id, movie_id, start_time FROM showtimes WHERE id = $1
`

func (q *Queries) GetShowtime(ctx context.Context, id uuid.UUID) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, getShowtime, id)
	var i Showtime
	err := row.Scan(&i.ID, &i.MovieID, &i.StartTime)
	return i, err
}

const getShowtimeByMovieAndStartTime = `-- name: GetShowtimeByMovieAndStartTime :one
SELECT id, movie_id, start_time FROM showtimes WHERE movie_id = $1 AND start_time = $2
`

type GetShowtimeByMovieAndStartTimeParams struct {
	MovieID   uuid.UUID
	StartTime time.Time
}

func (q *Queries) GetShowtimeByMovieAndStartTime(ctx context.Context, arg GetShowtimeByMovieAndStartTimeParams) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, getShowtimeByMovieAndStartTime, arg.MovieID, arg.StartTime)
	var i Showtime
	err := row.Scan(&i.ID, &i.MovieID, &i.StartTime)
	return i, err
}

const getShowtimeByMovieID = `-- name: GetShowtimeByMovieID :one
SELECT id, movie_id, start_time FROM showtimes WHERE movie_id = $1
`

func (q *Queries) GetShowtimeByMovieID(ctx context.Context, movieID uuid.UUID) (Showtime, error) {
	row := q.db.QueryRowContext(ctx, getShowtimeByMovieID, movieID)
	var i Showtime
	err := row.Scan(&i.ID, &i.MovieID, &i.StartTime)
	return i, err
}
