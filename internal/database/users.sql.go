// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, user_role, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserRole,
		&i.HashedPassword,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
Select id, created_at, updated_at, email, user_role, hashed_password
FROM users
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserRole,
		&i.HashedPassword,
	)
	return i, err
}

const getUserBookingInfo = `-- name: GetUserBookingInfo :many
SELECT 
    users.email,
    showtimes.start_time, 
    movies.title, 
    movies.description,
    movies.duration_minutes,
    movies.poster_image_url,
    movies.trailer_video_url,
    movies.rating,
    movies.genre,
    movies.director,
    movies.casts,
    bookings.id as booking_id
FROM users
LEFT JOIN bookings ON users.id = bookings.user_id
LEFT JOIN showtimes ON bookings.showtime_id = showtimes.id
LEFT JOIN movies ON showtimes.movie_id = movies.id
WHERE users.id = $1
`

type GetUserBookingInfoRow struct {
	Email           string
	StartTime       sql.NullTime
	Title           sql.NullString
	Description     sql.NullString
	DurationMinutes sql.NullInt32
	PosterImageUrl  sql.NullString
	TrailerVideoUrl sql.NullString
	Rating          sql.NullString
	Genre           sql.NullString
	Director        sql.NullString
	Casts           []string
	BookingID       uuid.NullUUID
}

func (q *Queries) GetUserBookingInfo(ctx context.Context, id uuid.UUID) ([]GetUserBookingInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserBookingInfo, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserBookingInfoRow
	for rows.Next() {
		var i GetUserBookingInfoRow
		if err := rows.Scan(
			&i.Email,
			&i.StartTime,
			&i.Title,
			&i.Description,
			&i.DurationMinutes,
			&i.PosterImageUrl,
			&i.TrailerVideoUrl,
			&i.Rating,
			&i.Genre,
			&i.Director,
			pq.Array(&i.Casts),
			&i.BookingID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
Select id, created_at, updated_at, email, user_role, hashed_password
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.UserRole,
		&i.HashedPassword,
	)
	return i, err
}
