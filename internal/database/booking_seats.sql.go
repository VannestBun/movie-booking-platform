// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: booking_seats.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBookingSeat = `-- name: CreateBookingSeat :one
INSERT INTO booking_seats (id, booking_id, seat_code)
VALUES (
    gen_random_uuid(),
    $1,
    $2
)
RETURNING id, booking_id, seat_code
`

type CreateBookingSeatParams struct {
	BookingID uuid.UUID
	SeatCode  string
}

func (q *Queries) CreateBookingSeat(ctx context.Context, arg CreateBookingSeatParams) (BookingSeat, error) {
	row := q.db.QueryRowContext(ctx, createBookingSeat, arg.BookingID, arg.SeatCode)
	var i BookingSeat
	err := row.Scan(&i.ID, &i.BookingID, &i.SeatCode)
	return i, err
}

const deleteSeats = `-- name: DeleteSeats :exec
DELETE FROM booking_seats
WHERE booking_id = $1
`

func (q *Queries) DeleteSeats(ctx context.Context, bookingID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSeats, bookingID)
	return err
}

const getBookedSeats = `-- name: GetBookedSeats :many
SELECT seat_code
FROM booking_seats
LEFT JOIN bookings ON booking_seats.booking_id = bookings.id
LEFT JOIN showtimes ON bookings.showtime_id = showtimes.id
WHERE showtimes.start_time = $1 AND showtimes.movie_id = $2
`

type GetBookedSeatsParams struct {
	StartTime time.Time
	MovieID   uuid.UUID
}

func (q *Queries) GetBookedSeats(ctx context.Context, arg GetBookedSeatsParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getBookedSeats, arg.StartTime, arg.MovieID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var seat_code string
		if err := rows.Scan(&seat_code); err != nil {
			return nil, err
		}
		items = append(items, seat_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookedSeatsByBookingID = `-- name: GetBookedSeatsByBookingID :many
SELECT seat_code
FROM booking_seats
WHERE booking_id = $1
`

func (q *Queries) GetBookedSeatsByBookingID(ctx context.Context, bookingID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getBookedSeatsByBookingID, bookingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var seat_code string
		if err := rows.Scan(&seat_code); err != nil {
			return nil, err
		}
		items = append(items, seat_code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
