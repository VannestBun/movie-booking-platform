// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_admin_stats.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const getShowtimeOccupancy = `-- name: GetShowtimeOccupancy :many
SELECT 
    movies.title, 
    showtimes.start_time, 
    COUNT(booking_seats.seat_code) AS occupied_seats
FROM showtimes
LEFT JOIN movies ON showtimes.movie_id = movies.id
LEFT JOIN bookings ON showtimes.id = bookings.showtime_id
LEFT JOIN booking_seats ON bookings.id = booking_seats.booking_id
WHERE movies.title = $1
GROUP BY movies.title, showtimes.start_time
ORDER BY start_time ASC
`

type GetShowtimeOccupancyRow struct {
	Title         sql.NullString
	StartTime     time.Time
	OccupiedSeats int64
}

func (q *Queries) GetShowtimeOccupancy(ctx context.Context, title string) ([]GetShowtimeOccupancyRow, error) {
	rows, err := q.db.QueryContext(ctx, getShowtimeOccupancy, title)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetShowtimeOccupancyRow
	for rows.Next() {
		var i GetShowtimeOccupancyRow
		if err := rows.Scan(&i.Title, &i.StartTime, &i.OccupiedSeats); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopFiveMovies = `-- name: GetTopFiveMovies :many
SELECT
    movies.id,
    movies.title,
    COUNT(bookings.id) AS total_bookings
FROM movies
LEFT JOIN showtimes ON movies.id = showtimes.movie_id
LEFT JOIN bookings ON showtimes.id = bookings.showtime_id
GROUP BY movies.id, movies.title
ORDER BY total_bookings DESC
LIMIT 5
`

type GetTopFiveMoviesRow struct {
	ID            uuid.UUID
	Title         string
	TotalBookings int64
}

func (q *Queries) GetTopFiveMovies(ctx context.Context) ([]GetTopFiveMoviesRow, error) {
	rows, err := q.db.QueryContext(ctx, getTopFiveMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopFiveMoviesRow
	for rows.Next() {
		var i GetTopFiveMoviesRow
		if err := rows.Scan(&i.ID, &i.Title, &i.TotalBookings); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAdminStats = `-- name: GetUserAdminStats :one
SELECT 
    (SELECT COUNT(*) FROM movies) AS total_movies,
    (SELECT COUNT(*) FROM users) AS total_users,
    (SELECT COUNT(*) FROM bookings) AS total_bookings,
    CAST((SELECT COUNT(*) FROM booking_seats) * 10.99 AS DECIMAL(10, 2)) AS total_revenue
`

type GetUserAdminStatsRow struct {
	TotalMovies   int64
	TotalUsers    int64
	TotalBookings int64
	TotalRevenue  string
}

func (q *Queries) GetUserAdminStats(ctx context.Context) (GetUserAdminStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAdminStats)
	var i GetUserAdminStatsRow
	err := row.Scan(
		&i.TotalMovies,
		&i.TotalUsers,
		&i.TotalBookings,
		&i.TotalRevenue,
	)
	return i, err
}
